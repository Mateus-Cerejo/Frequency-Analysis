(defun test-get-percentage()
  "Checks if all the percentages are being correctly calculated"
  (setf frequency-table (make-hash-table))
  (setf (gethash 'a frequency-table) 5)
  (setf (gethash 'b frequency-table) 15)
  (setf (gethash 'c frequency-table) 10)
  (setf (gethash 'd frequency-table) 20)
  (let ((total (reduce #'+ (maphash (lambda (key value) (values value)) frequency-table))))
    (get-percentage total)
    (let ((total-percentage (reduce #'+ (maphash (lambda (key value) (values value)) frequency-table))))
      (cond ((and (equal (gethash 'a frequency-table) (* (/ 5 total) 100)))
		  (equal (gethash 'b frequency-table) (* (/ 15 total) 100)))
		  (equal (gethash 'c frequency-table) (* (/ 10 total) 100)))
		  (equal (gethash 'd frequency-table) (* (/ 20 total) 100)))
		  (equal total-percentage 100))
	     (format t "Passed Test - Get Percentage~%"))
	    (t (format t "Failed Test - Get Percentage~%")
	       (format t "Total Percentage expected: 100%~%")
	       (format t "Total Percentage obtained: ~a~%" total-percentage)
	       (format t "Map values:~%")
	       (print-frequency-table))))))
